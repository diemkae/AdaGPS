20150130 - dmk

I just pushed a fix for the "inter-sentence drek" problem (below).

The difference between the FC16 and debian systems is that, when FC16
creates /dev/ttyUSB0 it sets stty "raw" mode, and the debian systems
apparently set stty "cooked" mode, perhaps in the belief that any such
device is a "terminal".

To fix AdaGPS for debian (all?) distros, I changed GPS.begin() to
establish the raw mode for the selected device.

Now, there is no evidence of garbage between valid nmea sentences.

20150129 - DMK

I just pushed 2 logfiles generated with:

   parsing -d /dev/ttyUSB0 2>&1 | tee logfile.[osId]

where osId indicated the Linux platform on which it was captured.

I am puzzled by the differences, specifcally, on two separate Fedora 16 systems,one fairly new AMD Athlon(tm) II X2 245 running 12K BogoMIPS, and the other
older IBM T42 running an single core Intel chip at about 3K BogoMIPS,
the debug info shows that during each 2 second display of data:

  1 - exactly 2 transmissions (each consisting of on RMC and one GGA
      sentence) were received from the SKM53 - as expected given the
	  NMEA_UPDATE_1HZ and NMEA_OUTPUT_RMCGGA settings

  2 - each was properly terminated with a NL character after the checksum

  3 - there were ZERO (0) GPS.parse failures

  4 - there were no nmea sentences with "old" timestamps

In stark contracts, the Ubuntu14.04LTS (on an Intel(R) Core(TM)2 Duo
CPU T6400  @ 2.00GHz laptop running 8K BogoMIPS) logfile, like the
Raspbian/wheezy (on a Pi, dmesg claiming only 2 BogoMIPS) and a Linux
Mint 17 (on an AMD Athlon(tm) 64 X2 Dual Core cpu, running 8755 BogoMIPS)
logfiles, show a continuous stream of transmissions being received from the
SKM53 receiver during the same 2 second display interval, many of which:

  1 - do not appear to contain nmea data

  2 - lack a NL immediately following the checksum (which is corrected by
      a change to GPS::parse() )

  3 - bear an "old" timestamp (i.e. older than the latest timestamp received
      in a valid nmea sentence)

If anyone has an insight into why old FC16 systems seems to receive
only 1 transmission of two NMEA sentences per second with NO GPS.parse
errors, while the data received by the debian-based distros contains
SO much more "junk" (including some correct sentences), please email me
at diemkae@gmail.com.  Thanks!

# ---------------------------------------------------------------------

The Adafruit_GPS Library was Originally written to run with Arduino core,
this has been Ported to run with Raspberry Pi Linux (raspbian wheezy)
by David Knight (diemkae@gmail.com) and tested with SKM53 GPS receiver
running at 9600 baud.  20150125  - DMK

Notable chages:

parsing.c:

  1 - Usage: parsing [-d] [/dev/ttyXXXX]
         -d enables debug output
         /dev/ttyXXXX specifies alternate serial device,
             default is /dev/ttyAMA0.

Adafruit_GPS.cpp:

  1 - fix bug(?) in GPS.parse() to handle NMEA sentences received
      without a NEWLINE after the checksum (frequent with SMK53
	  receover, at least)

  2 - expanded diagnostics when debug is enabled (-d)

It should be no surprise to Linux enthusiasts that this library
and example compile and run, without change, on other Linux distros,
e.g. Ubuntu 14.04LTS, Linux Mint 17, and even a couple old Fedora Core
16 systems which, curiously, did not receive ANY nmea sentences with
bad timestamps or without a trailing NEWLINE character from the SMK53
receiver.

# ------------------------------------------------------------------------

To run the parsing demo using the Pi's UART serial port, the default
console login (getty) on /dev/ttyAMA0 must be disabled:

    1 - remove the ttyAMA0 console from /boot/cmdline.txt, e.g. the
    line:

          dwc_otg.lpm_enable=0 console=ttyAMA0,115200 console=tty1 \
		        root=/dev/mmcblk0p2 rootfstype=ext4 elevator=deadline rootwait
		becomes:

          dwc_otg.lpm_enable=0 console=tty1 root=/dev/mmcblk0p2 \
		        rootfstype=ext4 elevator=deadline rootwait

   2 - /etc/inittab needs the respawn for the getty on that device to be
   commented, e.g.:

		   T0:23:respawn:/sbin/getty -L ttyAMA0 115200 vt100

		becomes:

		   #T0:23:respawn:/sbin/getty -L ttyAMA0 115200 vt100
    
	3 - because /dev/ttyAMA0 and any /dev/ttyUSBx devices will have ownership
	and permissions like:
	
         crw-rw---T 1 root dialout 204, 64 Jan 26 10:46 /dev/ttyAMA0
	
	the userid that is going to run the parsing demo ("dmk", in my case)
	needs to be added to the "dialout" group by editing /etc/group:

		 dialout:x:20:pi,dmk

	In the 2012-12-24 raspbian/wheezy distro, the userid "pi" is already
	in the dialout group.
	
	4- a reboot is necessary for these changes to take effect.

	To connect the SKM53 GPS receiver to the Pi UART serial port:
	
	            SKM53  Pi
				-----  --
			     RX    TX
				 TX    RX
				 Vcc   5v
				 GND   GND
	
	Note that, while the SKM53 has a Vcc of 5v +|-
	5% (it won't run on 3.3v), the SKM53 datasheet
	(http://www.nooelec.com/files/SKM53_Datasheet.pdf) states that
	"The serial connections are at 2.85V LVTTL logic levels", so
	it's safe to connect Rx/Tx to the Pi (where connecting 5v to
	those pins would be "bad"!

# -------------------------------------------------------------------

To run the parsing demo using a /dev/ttyUSBx device, only steps
3 and 4, above, are necessary.  

Use the command line arguments to specify the proper device:

   parsing /dev/ttyUSBx

This was tested using a Virtuabotix FTDI USB to Serial adapter** with
its voltage switch set to 5v and connected to the SKM53 as follows:

				       FTDI USB/
	            SKM53  ttl-5v
				-----  ----------
			     RX    TX
				 TX    RX
				 Vcc   Vcc/Vdd
				 GND   GND
	
** see:
  www.virtuabotix.com/product/versalino-ftdi-usb-serial-programmer-no-cable/


#ident "$Name:  $ $Header: /projRCS/rpi/AdaGPS/README.rpi,v 1.8 2015/01/30 10:35:46 dmk%leno Exp $"
